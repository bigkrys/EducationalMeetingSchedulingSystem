generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  passwordHash String
  role         String
  status       String         @default("pending")
  name         String
  lastLoginAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  admin        Admin?
  audits       AuditLog[]
  tokens       RefreshToken[]
  student      Student?
  teacher      Teacher?
}

model Subject {
  id              String           @id @default(uuid())
  name            String           @unique
  code            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  studentSubjects StudentSubject[]
  teacherSubjects TeacherSubject[]
}

model Student {
  id                  String           @id @default(uuid())
  userId              String           @unique
  serviceLevel        String
  monthlyMeetingsUsed Int              @default(0)
  lastQuotaReset      DateTime         @default(now())
  gradeLevel          Int?
  appointments        Appointment[]
  user                User             @relation(fields: [userId], references: [id])
  studentSubjects     StudentSubject[]
  waitlistEntries     Waitlist[]
}

model Teacher {
  id               String                @id @default(uuid())
  userId           String                @unique
  maxDailyMeetings Int                   @default(6)
  bufferMinutes    Int                   @default(15)
  timezone         String                @default("Asia/Shanghai")
  appointments     Appointment[]
  blockedTimes     BlockedTime[]
  user             User                  @relation(fields: [userId], references: [id])
  availability     TeacherAvailability[]
  teacherSubjects  TeacherSubject[]
  waitlistEntries  Waitlist[]
}

model StudentSubject {
  id        String   @id @default(uuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, subjectId])
  @@index([studentId])
  @@index([subjectId])
}

model TeacherSubject {
  id        String   @id @default(uuid())
  teacherId String
  subjectId String
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, subjectId])
  @@index([teacherId])
  @@index([subjectId])
}

model Admin {
  id     String  @id @default(uuid())
  userId String  @unique
  scope  String?
  user   User    @relation(fields: [userId], references: [id])
}

model TeacherAvailability {
  id        String   @id @default(uuid())
  teacherId String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@index([teacherId, dayOfWeek])
  @@index([teacherId, isActive])
}

model BlockedTime {
  id        String   @id @default(uuid())
  teacherId String
  startTime DateTime
  endTime   DateTime
  reason    String?
  createdAt DateTime @default(now())
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@index([teacherId, startTime, endTime])
}

model Appointment {
  id               String    @id @default(uuid())
  studentId        String
  teacherId        String
  subjectId        String
  scheduledTime    DateTime
  durationMinutes  Int       @default(30)
  status           String
  approvalRequired Boolean
  approvedAt       DateTime?
  idempotencyKey   String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  subject          Subject   @relation(fields: [subjectId], references: [id])
  teacher          Teacher   @relation(fields: [teacherId], references: [id])
  student          Student   @relation(fields: [studentId], references: [id])

  @@index([teacherId, scheduledTime])
  @@index([studentId, scheduledTime])
  @@index([status, scheduledTime])
  @@index([subjectId])
}

model Waitlist {
  id        String   @id @default(uuid())
  teacherId String
  studentId String
  date      String
  slot      DateTime
  priority  Int      @default(0)
  status    String   @default("waiting")
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@index([teacherId, date, slot])
  @@index([priority, createdAt])
}

model ServicePolicy {
  id                 String   @id @default(uuid())
  level              String   @unique
  monthlyAutoApprove Int      @default(0)
  priority           Boolean  @default(false)
  expireHours        Int      @default(48)
  reminderOffsets    String   @default("24,1")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, revoked])
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  targetId  String?
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  actor     User?    @relation(fields: [actorId], references: [id])

  @@index([actorId, action])
  @@index([createdAt])
}
