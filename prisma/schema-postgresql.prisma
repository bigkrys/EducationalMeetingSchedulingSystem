generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  passwordHash String
  role         String
  status       String         @default("pending")
  name         String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  student      Student?
  teacher      Teacher?
  auditLogs    AuditLog[]     @relation("ActorAuditLogs")
  refreshTokens RefreshToken[]

  @@map("users")
}

model Student {
  id                  String    @id @default(uuid())
  userId              String    @unique
  serviceLevel        String    @default("level1")
  monthlyMeetingsUsed Int       @default(0)
  lastQuotaReset      DateTime  @default(now())
  gradeLevel          Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments        Appointment[]
  studentSubjects     StudentSubject[]
  waitlists           Waitlist[]

  @@map("students")
}

model Teacher {
  id               String    @id @default(uuid())
  userId           String    @unique
  maxDailyMeetings Int       @default(8)
  bufferMinutes    Int       @default(15)
  workingHours     Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  teacherSubjects  TeacherSubject[]
  availability     TeacherAvailability[]
  blockedTimes     BlockedTime[]
  waitlists        Waitlist[]

  @@map("teachers")
}

model Subject {
  id          String    @id @default(uuid())
  name        String    @unique
  code        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  appointments     Appointment[]
  studentSubjects  StudentSubject[]
  teacherSubjects  TeacherSubject[]

  @@map("subjects")
}

model StudentSubject {
  id        String   @id @default(uuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
  @@map("student_subjects")
}

model TeacherSubject {
  id        String   @id @default(uuid())
  teacherId String
  subjectId String
  createdAt DateTime @default(now())
  
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model Appointment {
  id               String    @id @default(uuid())
  studentId        String
  teacherId        String
  subjectId        String
  scheduledTime    DateTime
  durationMinutes  Int       @default(30)
  status           String    @default("pending")
  approvalRequired Boolean   @default(true)
  approvedAt       DateTime?
  studentNotes     String?
  teacherNotes     String?
  idempotencyKey   String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  student          Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher          Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject          Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model TeacherAvailability {
  id          String   @id @default(uuid())
  teacherId   String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isRecurring Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("teacher_availability")
}

model BlockedTime {
  id        String    @id @default(uuid())
  teacherId String
  startTime DateTime
  endTime   DateTime
  reason    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("blocked_times")
}

model Waitlist {
  id        String   @id @default(uuid())
  teacherId String
  date      String
  slot      DateTime
  studentId String
  createdAt DateTime @default(now())
  
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teacherId, slot, studentId])
  @@map("waitlists")
}

model ServicePolicy {
  id                String   @id @default(uuid())
  level             String   @unique
  monthlyAutoApprove Int     @default(0)
  priority          Boolean  @default(false)
  expireHours       Int      @default(48)
  reminderOffsets   String   @default("24,1")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("service_policies")
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  targetId  String?
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  actor     User?    @relation("ActorAuditLogs", fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
