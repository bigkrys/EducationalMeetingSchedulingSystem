name: Release to Production

on:
  workflow_dispatch: {}
  push:
    branches: [main]

jobs:
  release:
    name: Migrate DB and Deploy (prod)
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install --no-frozen-lockfile
      - run: pnpm db:generate

      - name: Prisma migrate deploy (prod)
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_URL }}
        run: pnpm db:migrate:deploy

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Resolve Production URL
        run: |
          RAW_URL='${{ steps.vercel.outputs.preview-url }}'
          if echo "$RAW_URL" | grep -qE '^https?://'; then
            URL="$RAW_URL"
          else
            URL="https://$RAW_URL"
          fi
          echo "Resolved Production URL: $URL"
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Attach environment URL to Production deployment
        uses: actions/github-script@v7
        continue-on-error: true
        env:
          ENV_URL: ${{ env.URL }}
        with:
          github-token: ${{ github.token }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner,
              repo,
              ref: context.ref,
              environment: 'production',
              per_page: 1,
            });
            if (!deployments.length) {
              core.warning('No production deployment found to attach URL to.');
            } else {
              const id = deployments[0].id;
              await github.rest.repos.createDeploymentStatus({
                owner,
                repo,
                deployment_id: id,
                state: 'success',
                environment: 'production',
                environment_url: process.env.ENV_URL,
                auto_inactive: false,
              });
              core.notice(`Attached production environment URL: ${process.env.ENV_URL}`);
            }
