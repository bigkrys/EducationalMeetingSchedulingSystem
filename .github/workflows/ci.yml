name: CI + Staging Pipeline

on:
  pull_request:
  push:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - run: pnpm install --no-frozen-lockfile
      - run: pnpm typecheck
      - run: pnpm lint
      - run: pnpm test --if-present

  migrate-staging:
    name: DB Migrate (staging on develop)
    runs-on: ubuntu-latest
    needs: checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: Preview
    env:
      DATABASE_URL: ${{ secrets.NEON_STAGING_URL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install --no-frozen-lockfile
      - run: pnpm db:generate
      - name: Validate DATABASE_URL for staging
        run: |
          if [ -z "${DATABASE_URL}" ]; then
            echo "::error::Missing secret NEON_STAGING_URL. Add it in GitHub Settings → Secrets and variables → Actions."
            exit 1
          fi
          case "$DATABASE_URL" in
            postgres://*|postgresql://*) echo "DATABASE_URL looks valid for Postgres" ;;
            *) echo "::warning::DATABASE_URL does not look like a Postgres URL" ;;
          esac
      - name: Prisma migrate deploy (staging)
        run: pnpm db:migrate:deploy
      - name: Prisma migrate status (staging)
        run: pnpm exec prisma migrate status

  deploy-staging:
    name: Deploy Staging (develop branch)
    runs-on: ubuntu-latest
    needs: migrate-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: Preview
    permissions:
      deployments: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Deploy to Vercel (Preview)
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Resolve Preview URL
        run: |
          RAW_URL='${{ steps.vercel.outputs.preview-url }}'
          if echo "$RAW_URL" | grep -qE '^https?://'; then
            URL="$RAW_URL"
          else
            URL="https://$RAW_URL"
          fi
          echo "Resolved Preview URL: $URL"
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Wait staging up
        run: |
          echo "Staging URL: $URL"
          npx wait-on --timeout 180000 "$URL"

      - name: Attach environment URL to Preview deployment
        uses: actions/github-script@v7
        env:
          ENV_URL: ${{ env.URL }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: deployments } = await github.repos.listDeployments({
              owner, repo,
              ref: context.ref,
              environment: 'Preview',
              per_page: 1,
            });
            if (!deployments.length) {
              core.warning('No Preview deployment found to attach URL to.');
            } else {
              const id = deployments[0].id;
              await github.repos.createDeploymentStatus({
                owner, repo,
                deployment_id: id,
                state: 'success',
                environment: 'Preview',
                environment_url: process.env.ENV_URL,
                auto_inactive: false,
              });
              core.notice(`Attached environment URL: ${process.env.ENV_URL}`);
            }

      - name: Run smoke tests against staging (if present)
        env:
          BASE_URL: ${{ env.URL }}
          DATABASE_URL: ${{ secrets.NEON_STAGING_URL }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm run --if-present smoke
